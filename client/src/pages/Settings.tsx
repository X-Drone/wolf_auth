// src/pages/Settings.tsx
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import "../styles/Settings.css" // –°–æ–∑–¥–∞–¥–∏–º —Ñ–∞–π–ª —Å—Ç–∏–ª–µ–π

// –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤
const LANGUAGES = [
  { code: 'ru', name: '–†—É—Å—Å–∫–∏–π' },
  { code: 'en', name: 'English' },
  // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ —è–∑—ã–∫–∏ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
];

const Setting: React.FC = () => {
  const navigate = useNavigate();

  // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ localStorage –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
  const getInitialSettings = () => {
    const savedDarkMode = localStorage.getItem('darkMode');
    const savedLanguage = localStorage.getItem('language');
    return {
      darkMode: savedDarkMode ? JSON.parse(savedDarkMode) : false,
      language: savedLanguage || 'ru',
    };
  };

  const [settings, setSettings] = useState(getInitialSettings);

  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    if (settings.darkMode) {
      document.body.classList.add('dark-mode');
    } else {
      document.body.classList.remove('dark-mode');
    }
  }, [settings.darkMode]);

  const handleDarkModeToggle = () => {
    const newDarkMode = !settings.darkMode;
    setSettings(prev => ({ ...prev, darkMode: newDarkMode }));
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    localStorage.setItem('darkMode', JSON.stringify(newDarkMode));
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–ª–∞—Å—Å –∫ body
    if (newDarkMode) {
      document.body.classList.add('dark-mode');
    } else {
      document.body.classList.remove('dark-mode');
    }
  };

  const handleLanguageChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const newLanguage = e.target.value;
    setSettings(prev => ({ ...prev, language: newLanguage }));
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    localStorage.setItem('language', newLanguage);
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    console.log("–Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞:", newLanguage);
  };

  const handleCancel = () => {
    navigate('/profile');
  };

  return (
    <div className="settings-container">
      <div className="settings-card">
        <button onClick={handleCancel} className="back-button">
          ‚Üê –ù–∞–∑–∞–¥
        </button>

        <h1 className="settings-title">–ù–∞—Å—Ç—Ä–æ–π–∫–∏</h1>

        <div className="settings-section">
          <h2 className="section-header">–í–Ω–µ—à–Ω–∏–π –≤–∏–¥</h2>
          <div className="setting-item">
            <label htmlFor="dark-mode-toggle" className="setting-label">–¢—ë–º–Ω–∞—è —Ç–µ–º–∞</label>
            <div className="setting-control">
              <button
                id="dark-mode-toggle"
                onClick={handleDarkModeToggle}
                className={`toggle-button ${settings.darkMode ? 'active' : ''}`}
              >
                {settings.darkMode ? 'üåô –¢—ë–º–Ω—ã–π' : '‚òÄÔ∏è –°–≤–µ—Ç–ª—ã–π'}
              </button>
            </div>
          </div>
        </div>

        <div className="settings-section">
          <h2 className="section-header">–Ø–∑—ã–∫</h2>
          <div className="setting-item">
            <label htmlFor="language-select" className="setting-label">–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫</label>
            <div className="setting-control">
              <select
                id="language-select"
                value={settings.language}
                onChange={handleLanguageChange}
                className="language-select"
              >
                {LANGUAGES.map(lang => (
                  <option key={lang.code} value={lang.code}>
                    {lang.name}
                  </option>
                ))}
              </select>
            </div>
          </div>
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞" */}
        <div className="form-actions">
          <button type="button" onClick={handleCancel} className="cancel-button">
            –ì–æ—Ç–æ–≤–æ
          </button>
        </div>
      </div>
    </div>
  );
};

export default Setting;